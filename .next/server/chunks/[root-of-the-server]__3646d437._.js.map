{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file:///Users/agungardhiyanda/Documents/GitHub/sprirntpedia-proxy-server/src/shared/%20consts/global-config.ts"],"sourcesContent":["const GLOBALS = {\n  API_BASE_URL: \"https://sprintpedia.id\",\n};\n\nexport default GLOBALS;\n"],"names":[],"mappings":";;;;AAAA,MAAM,UAAU;IACd,cAAc;AAChB;uCAEe","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///Users/agungardhiyanda/Documents/GitHub/sprirntpedia-proxy-server/src/shared/libs/http.ts"],"sourcesContent":["import axios from \"axios\";\nimport GLOBALS from \"@/shared/ consts/global-config\";\n/**\n * Base configuration for API request fetching.\n * @example http.get('/user')\n */\n\nconst http = axios.create({\n  baseURL: GLOBALS.API_BASE_URL,\n  withCredentials: true,\n});\n\nexport default http;\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AACA;;;CAGC,GAED,MAAM,OAAO,qMAAK,CAAC,MAAM,CAAC;IACxB,SAAS,0JAAO,CAAC,YAAY;IAC7B,iBAAiB;AACnB;uCAEe","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///Users/agungardhiyanda/Documents/GitHub/sprirntpedia-proxy-server/src/app/api/auth/ardhi/login/route.ts"],"sourcesContent":["import axios from \"axios\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport FormData from \"form-data\";\nimport * as cheerio from \"cheerio\";\nimport http from \"@/shared/libs/http\";\n\nexport async function POST(req: NextRequest) {\n  try {\n    const loginPage = await http.get(\"/auth/login\", {\n      headers: {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64)\",\n        Accept:\n          \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n      },\n    });\n\n    const setCookies: string[] = loginPage.headers[\"set-cookie\"] || [];\n\n    if (!setCookies.length) {\n      return NextResponse.json(\n        { error: \"No cookies received from login page\" },\n        { status: 400 }\n      );\n    }\n\n    const cookieString = setCookies.map((c) => c.split(\";\")[0]).join(\"; \");\n\n    const $ = cheerio.load(loginPage.data);\n    const csrfToken = $('input[name=\"csrf_token\"]').val();\n\n    if (!csrfToken) {\n      return NextResponse.json(\n        { error: \"CSRF token not found in form\" },\n        { status: 400 }\n      );\n    }\n\n    console.log(\"csrf_token (from form):\", csrfToken);\n\n    const form = new FormData();\n    form.append(\"csrf_token\", csrfToken as string);\n    form.append(\"username\", \"agungardhiyanda\");\n    form.append(\"password\", \"Aldhie2703\");\n    form.append(\"submit\", \"Login\");\n\n    const res = await http.post(\"/request/auth/login\", form, {\n      headers: {\n        ...form.getHeaders(),\n        Cookie: cookieString,\n        Origin: \"https://sprintpedia.id\",\n        Referer: \"https://sprintpedia.id/auth/login\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        Accept: \"application/json, text/javascript, */*; q=0.01\",\n      },\n    });\n\n    console.log(\"Headers dari POST login response:\", res.headers);\n    console.log(\"Status login:\", res.status);\n    console.log(\"Data login response:\", res.data);\n    console.log(\"Cookies setelah login:\", res.headers[\"set-cookie\"]);\n\n    const newCookies: string[] = res.headers[\"set-cookie\"] || [];\n\n    const response = NextResponse.json(res.data, { status: res.status });\n\n    newCookies.forEach((cookie) => {\n      response.headers.append(\"Set-Cookie\", cookie);\n    });\n\n    return response;\n  } catch (err: any) {\n    console.error(\"Error:\", err.response?.data || err.message);\n    return NextResponse.json(\n      { error: err.response?.data || err.message },\n      { status: err.response?.status || 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAAA;AACA;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,YAAY,MAAM,0IAAI,CAAC,GAAG,CAAC,eAAe;YAC9C,SAAS;gBACP,cAAc;gBACd,QACE;YACJ;QACF;QAEA,MAAM,aAAuB,UAAU,OAAO,CAAC,aAAa,IAAI,EAAE;QAElE,IAAI,CAAC,WAAW,MAAM,EAAE;YACtB,OAAO,+QAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,eAAe,WAAW,GAAG,CAAC,CAAC,IAAM,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC;QAEjE,MAAM,IAAI,qNAAY,CAAC,UAAU,IAAI;QACrC,MAAM,YAAY,EAAE,4BAA4B,GAAG;QAEnD,IAAI,CAAC,WAAW;YACd,OAAO,+QAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,2BAA2B;QAEvC,MAAM,OAAO,IAAI,sNAAQ;QACzB,KAAK,MAAM,CAAC,cAAc;QAC1B,KAAK,MAAM,CAAC,YAAY;QACxB,KAAK,MAAM,CAAC,YAAY;QACxB,KAAK,MAAM,CAAC,UAAU;QAEtB,MAAM,MAAM,MAAM,0IAAI,CAAC,IAAI,CAAC,uBAAuB,MAAM;YACvD,SAAS;gBACP,GAAG,KAAK,UAAU,EAAE;gBACpB,QAAQ;gBACR,QAAQ;gBACR,SAAS;gBACT,oBAAoB;gBACpB,QAAQ;YACV;QACF;QAEA,QAAQ,GAAG,CAAC,qCAAqC,IAAI,OAAO;QAC5D,QAAQ,GAAG,CAAC,iBAAiB,IAAI,MAAM;QACvC,QAAQ,GAAG,CAAC,wBAAwB,IAAI,IAAI;QAC5C,QAAQ,GAAG,CAAC,0BAA0B,IAAI,OAAO,CAAC,aAAa;QAE/D,MAAM,aAAuB,IAAI,OAAO,CAAC,aAAa,IAAI,EAAE;QAE5D,MAAM,WAAW,+QAAY,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;YAAE,QAAQ,IAAI,MAAM;QAAC;QAElE,WAAW,OAAO,CAAC,CAAC;YAClB,SAAS,OAAO,CAAC,MAAM,CAAC,cAAc;QACxC;QAEA,OAAO;IACT,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,UAAU,IAAI,QAAQ,EAAE,QAAQ,IAAI,OAAO;QACzD,OAAO,+QAAY,CAAC,IAAI,CACtB;YAAE,OAAO,IAAI,QAAQ,EAAE,QAAQ,IAAI,OAAO;QAAC,GAC3C;YAAE,QAAQ,IAAI,QAAQ,EAAE,UAAU;QAAI;IAE1C;AACF","debugId":null}}]
}