{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///Users/agungardhiyanda/Documents/GitHub/sprirntpedia-proxy-server/src/shared/libs/server-http.ts"],"sourcesContent":["import axios from \"axios\";\nimport GLOBALS from \"@/shared/ consts/global-config\";\n\n/**\n * Base configuration for API request fetching.\n * @example serverHttp.get('/user')\n */\n\nconst serverHttp = axios.create({\n  baseURL: \"http://localhost:3000/\",\n  withCredentials: true,\n});\n\nexport default serverHttp;\n"],"names":[],"mappings":";;;;AAAA;;AAGA;;;CAGC,GAED,MAAM,aAAa,mMAAK,CAAC,MAAM,CAAC;IAC9B,SAAS;IACT,iBAAiB;AACnB;uCAEe","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///Users/agungardhiyanda/Documents/GitHub/sprirntpedia-proxy-server/src/features/auth/hooks/useCsrfToken.ts"],"sourcesContent":["import serverHttp from \"@/shared/libs/server-http\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst useCsrfToken = () => {\n  const getToken = async () => {\n    const res = await serverHttp.get(\"/api/auth/ardhi/token\");\n    return res.data.csrf_token;\n  };\n  const {\n    data: csrfToken,\n    isLoading,\n    isError,\n    error,\n  } = useQuery({\n    queryKey: [\"csrfToken\"],\n    queryFn: getToken,\n  });\n  return { csrfToken, isLoading, isError, error };\n};\n\nexport default useCsrfToken;\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,eAAe;IACnB,MAAM,WAAW;QACf,MAAM,MAAM,MAAM,kJAAU,CAAC,GAAG,CAAC;QACjC,OAAO,IAAI,IAAI,CAAC,UAAU;IAC5B;IACA,MAAM,EACJ,MAAM,SAAS,EACf,SAAS,EACT,OAAO,EACP,KAAK,EACN,GAAG,IAAA,uRAAQ,EAAC;QACX,UAAU;YAAC;SAAY;QACvB,SAAS;IACX;IACA,OAAO;QAAE;QAAW;QAAW;QAAS;IAAM;AAChD;uCAEe","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///Users/agungardhiyanda/Documents/GitHub/sprirntpedia-proxy-server/src/features/auth/component/login-form.tsx"],"sourcesContent":["\"use client\";\nimport { Button, Group, Input, Stack, Text } from \"@mantine/core\";\nimport { useState } from \"react\";\nimport useCsrfToken from \"../hooks/useCsrfToken\";\nimport http from \"@/shared/libs/http\";\nimport AuthFormProps from \"@/shared/types/form/auth-form\";\nimport { useForm } from \"react-hook-form\";\nimport serverHttp from \"@/shared/libs/server-http\";\n\nconst LoginForm = () => {\n  const { csrfToken, isLoading: tokenLoading } = useCsrfToken();\n\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const { register, handleSubmit } = useForm<AuthFormProps>({\n    defaultValues: {\n      username: \"agungardhiyanda\",\n      password: \"Aldhie2703\",\n      csrf_token: csrfToken || \"\",\n    },\n  });\n\n  const onSubmit = async (data: AuthFormProps) => {\n    setLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append(\"csrf_token\", data.csrf_token);\n      formData.append(\"username\", data.username);\n      formData.append(\"password\", data.password);\n\n      //fetch data to api\n      const res = await serverHttp.post(\"/api/auth/ardhi/login\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n      window.location.href = \"/home\";\n    } catch (error: any) {\n      setMessage(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  //update csrf_token\n  const defaultValue = {\n    username: \"agungardhiyanda\",\n    password: \"Aldhie2703\",\n    csrf_token: csrfToken || \"\",\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Stack className=\"w-full\">\n        <Input hidden {...register(\"csrf_token\")} />\n        <Input hidden {...register(\"username\")} />\n        <Input hidden {...register(\"password\")} />\n        <Group className=\"w-full justify-center\">\n          <Button type=\"submit\" disabled={loading || tokenLoading}>\n            {loading || tokenLoading ? \"Loading...\" : \"Continue\"}\n          </Button>\n        </Group>\n      </Stack>\n    </form>\n  );\n};\n\nexport { LoginForm };\n"],"names":[],"mappings":";;;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAPA;;;;;;;AASA,MAAM,YAAY;IAChB,MAAM,EAAE,SAAS,EAAE,WAAW,YAAY,EAAE,GAAG,IAAA,2JAAY;IAE3D,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,gVAAQ,EAAC;IACvC,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,gVAAQ,EAAC;IAEvC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,IAAA,kQAAO,EAAgB;QACxD,eAAe;YACb,UAAU;YACV,UAAU;YACV,YAAY,aAAa;QAC3B;IACF;IAEA,MAAM,WAAW,OAAO;QACtB,WAAW;QACX,IAAI;YACF,MAAM,WAAW,IAAI;YACrB,SAAS,MAAM,CAAC,cAAc,KAAK,UAAU;YAC7C,SAAS,MAAM,CAAC,YAAY,KAAK,QAAQ;YACzC,SAAS,MAAM,CAAC,YAAY,KAAK,QAAQ;YAEzC,mBAAmB;YACnB,MAAM,MAAM,MAAM,kJAAU,CAAC,IAAI,CAAC,yBAAyB,UAAU;gBACnE,SAAS;oBACP,gBAAgB;gBAClB;YACF;YACA,OAAO,QAAQ,CAAC,IAAI,GAAG;QACzB,EAAE,OAAO,OAAY;YACnB,WAAW;QACb,SAAU;YACR,WAAW;QACb;IACF;IAEA,mBAAmB;IACnB,MAAM,eAAe;QACnB,UAAU;QACV,UAAU;QACV,YAAY,aAAa;IAC3B;IAEA,qBACE,6WAAC;QAAK,UAAU,aAAa;kBAC3B,cAAA,6WAAC,6ZAAK;YAAC,WAAU;;8BACf,6WAAC,6ZAAK;oBAAC,MAAM;oBAAE,GAAG,SAAS,aAAa;;;;;;8BACxC,6WAAC,6ZAAK;oBAAC,MAAM;oBAAE,GAAG,SAAS,WAAW;;;;;;8BACtC,6WAAC,6ZAAK;oBAAC,MAAM;oBAAE,GAAG,SAAS,WAAW;;;;;;8BACtC,6WAAC,6ZAAK;oBAAC,WAAU;8BACf,cAAA,6WAAC,gaAAM;wBAAC,MAAK;wBAAS,UAAU,WAAW;kCACxC,WAAW,eAAe,eAAe;;;;;;;;;;;;;;;;;;;;;;AAMtD","debugId":null}}]
}